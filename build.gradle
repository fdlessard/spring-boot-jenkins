plugins {
    id 'org.springframework.boot' version '2.2.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
    id "com.github.spotbugs" version "4.2.0"
    id 'org.owasp.dependencycheck' version '5.3.2.1'
    id 'pmd'
}

group = 'io.fdlessard.codebites'
archivesBaseName = 'jenkins'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

ext {
    checkstyleToolVersion  = '8.23'
    jacocoToolVersion = "0.8.5"
    pmdToolVersion = '6.23.0'
    spotBugsToolVersion = '4.0.3'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation  'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.security:spring-security-test'
}

checkstyle {
    toolVersion checkstyleToolVersion
    configFile = 'code-styles/google-checkstyle.xml' as File
}

jacoco {
    toolVersion = jacocoToolVersion
}

spotbugs {
    toolVersion = spotBugsToolVersion
    effort = 'max'
}

pmd {
    toolVersion = pmdToolVersion
    consoleOutput = true
    ignoreFailures = true
    pmdTest.enabled = false
    incrementalAnalysis = true
}

pmdMain {
    reports {
        xml.enabled true
        html.enabled true
    }
}

dependencyCheck {
    failOnError = false
    formats = ['XML', 'HTML']
    // bug ... outputDirectory not working now
    //outputDirectory = "build/reports/dependency-check"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'BUNDLE'
            excludes = ['*It.class', '*It.java']
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.10
            }
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.20
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
            limit {
                counter = 'COMPLEXITY'
                value = 'COVEREDRATIO'
                minimum = 0.11
            }
        }
    }
}

test {
    useJUnitPlatform()
    check.dependsOn jacocoTestCoverageVerification
    finalizedBy jacocoTestReport
    testLogging {
        exceptionFormat = 'full'
        showExceptions true
        showCauses true
        showStackTraces true
        events 'passed', "skipped", 'failed', 'standardError', 'standardOut'
    }
    jacoco {
        enabled = true
        ignoreFailures = false
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nUnit Test result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled = true
    }
}

sourceSets {
    integrationTest {
        java.srcDir 'src/it/java'
        resources.srcDir 'src/it/resources'
        compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testCompileClasspath
        runtimeClasspath += output + compileClasspath + configurations.testRuntimeClasspath
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
    check.dependsOn integrationTest // if you only want unit test, comment
    //dependsOn jar

    testLogging {
        exceptionFormat = 'full'
        showExceptions true
        showCauses true
        showStackTraces true
        events 'passed', "skipped", 'failed', 'standardError', 'standardOut'
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nIntegration Test result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}